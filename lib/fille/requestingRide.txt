import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:latlong2/latlong.dart';
import 'package:provider/provider.dart';
import 'package:ride_app/Auth/api_service.dart';
import 'package:ride_app/Auth/web_socket_service.dart';
import 'package:ride_app/compont/placeSearchWidget.dart';
import 'package:ride_app/compont/Map/routeMap.dart';
import 'package:ride_app/driver.dart';
import 'package:ride_app/passenger.dart';
import 'package:ride_app/request_ride.dart';
import 'package:ride_app/scrollablePages/requestingRideDetail.dart';

// ignore: must_be_immutable
class RequestingRide extends StatefulWidget {
  RequestingRide({super.key, required this.rquestRide});

  RequestRide rquestRide;

  @override
  State<RequestingRide> createState() => _RequestingRideState();
}

class _RequestingRideState extends State<RequestingRide> {
  Timer? _timer;
  double? distance;
  double? duration;
  List<LatLng>? routePoints;
  late List<Driver> drivers;
  Key _mapKey = UniqueKey();
  bool isLoading = false;
  late Passenger passenger;
  Driver? currentDriver;
  bool isDriverFound = false;

  @override
  void initState() {
    super.initState();
    _loadDrivers();
    passenger = context.read<PassengerProvider>().passenger!;
    _setupWebSocketListener();
  }

  void _setupWebSocketListener() {
    // Assuming you have a WebSocket service
    WebSocketService(context).onDriverResponse = (driverData) {
      if (driverData['status'] == 'accepted') {
        setState(() {
          currentDriver =
              drivers.firstWhere((d) => d.id == driverData['driver_id']);
          isDriverFound = true;
        });
      }
    };
  }

  Future<void> _loadDrivers() async {
    setState(() => isLoading = true);
    try {
      final fetchedDrivers =
          await ApiService().getDriverAround(widget.rquestRide.pickupPlace!);
      setState(() {
        drivers = fetchedDrivers;
        debugPrint("drivers: ${drivers.length}");
      });
    } catch (e) {
      debugPrint("Error loading drivers: $e");
    } finally {
      setState(() => isLoading = false);
    }
  }

  void _addingStops(Place newPlace) async {
    await _loadDrivers();
    setState(() {
      _mapKey = UniqueKey();
      final updatedStops =
          List<Place>.from(widget.rquestRide.stopsPlaces ?? []);
      updatedStops.add(newPlace);
      widget.rquestRide.stopsPlaces = updatedStops;
      _resetRouteData();
    });
  }

  void _removeStops(Place placeToRemove) async {
    await _loadDrivers();
    setState(() {
      _mapKey = UniqueKey();
      final updatedStops =
          List<Place>.from(widget.rquestRide.stopsPlaces ?? []);
      updatedStops.remove(placeToRemove);
      widget.rquestRide.stopsPlaces = updatedStops;
      _resetRouteData();
    });
  }

  void _resetRouteData() {
    distance = null;
    duration = null;
    routePoints = null;
  }

  @override
  void dispose() {
    _timer?.cancel();
    // Clean up WebSocket connection if needed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        if (!isLoading)
          RouteMap(
            key: _mapKey,
            availableDriver: drivers,
            currentDriver: currentDriver, // Pass the current driver if found
            startPlace: widget.rquestRide.pickupPlace,
            endPlace: widget.rquestRide.destinationPlace,
            stops: widget.rquestRide.stopsPlaces,
            onRouteCalculated: (dist, dur, points) {
              setState(() {
                distance = dist;
                duration = dur;
                routePoints = points;
              });
              debugPrint(
                  "Route calculated: Distance - $distance, Duration - $duration");
            },
          ),
        Consumer<RideRequestProvider>(
          builder: (context, provider, child) {
            switch (provider.status) {
              case RideRequestStatus.initial:
                return RequestingRideDetails(
                  rquestRide: widget.rquestRide,
                  addingStops: _addingStops,
                  removeStops: _removeStops,
                  distance: distance,
                  duration: duration,
                  isDriverFound: isDriverFound ,
                );

              case RideRequestStatus.searching:
                return SearchingDriverWidget(
                  onCancel: provider.cancelRequest,
                );

              case RideRequestStatus.driverFound:
                return DriverFoundWidget(
                  driver: provider.currentDriver!,
                  rideDetails: widget.rquestRide,
                  distance: distance,
                  duration: duration,
                );

              case RideRequestStatus.noDriversAvailable:
                return NoDriversWidget(
                  onRetry: () => _sendRideRequest(provider),
                );

              case RideRequestStatus.error:
                return RideErrorWidget(
                  error: provider.error!,
                  onRetry: () => _sendRideRequest(provider),
                );
            }
          },
        ),
      ],
    );
  }
    void _sendRideRequest(RideRequestProvider provider) async {
    await provider.sendRideRequest(widget.rquestRide, drivers , passenger.id);
  }
}

class SearchingDriverWidget extends StatelessWidget {
  final VoidCallback onCancel;

  const SearchingDriverWidget({Key? key, required this.onCancel}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: 16),
          Text(
            'Looking for nearby drivers...',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: onCancel,
            child: Text('Cancel Request'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              padding: EdgeInsets.symmetric(horizontal: 32, vertical: 12),
            ),
          ),
        ],
      ),
    );
  }
}

class DriverFoundWidget extends StatelessWidget {
  final Driver driver;
  final RequestRide rideDetails;
  final double? distance;
  final double? duration;

  const DriverFoundWidget({
    Key? key,
    required this.driver,
    required this.rideDetails,
    this.distance,
    this.duration,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'Driver Found!',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          ListTile(
            leading: CircleAvatar(
              backgroundImage: NetworkImage(driver.profile_photo!),
            ),
            title: Text(driver.first_name + " " + driver.last_name),
            subtitle: Text('${driver.vehicle_model} - ${driver.license_plate}'),
          ),
          if (distance != null && duration != null)
            Padding(
              padding: EdgeInsets.symmetric(vertical: 8),
              child: Text(
                'ETA: ${(duration! / 60).round()} mins (${distance!.toStringAsFixed(1)} km)',
                style: TextStyle(fontSize: 16),
              ),
            ),
        ],
      ),
    );
  }
}

class NoDriversWidget extends StatelessWidget {
  final VoidCallback onRetry;

  const NoDriversWidget({Key? key, required this.onRetry}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.error_outline, size: 48, color: Colors.orange),
          SizedBox(height: 16),
          Text(
            'No drivers available',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: onRetry,
            child: Text('Try Again'),
          ),
        ],
      ),
    );
  }
}

class RideErrorWidget extends StatelessWidget {
  final String error;
  final VoidCallback onRetry;

  const RideErrorWidget({
    Key? key,
    required this.error,
    required this.onRetry,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.error_outline, size: 48, color: Colors.red),
          SizedBox(height: 16),
          Text(
            'Error',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          Text(error, style: TextStyle(color: Colors.red)),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: onRetry,
            child: Text('Try Again'),
          ),
        ],
      ),
    );
  }
}